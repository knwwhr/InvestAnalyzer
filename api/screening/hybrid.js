/**
 * ÌïòÏù¥Î∏åÎ¶¨Îìú ÏÑ†Ìñâ Ìè¨Ï∞© ÏãúÏä§ÌÖú API ÏóîÎìúÌè¨Ïù∏Ìä∏
 * GET /api/screening/hybrid?limit=10
 *
 * ÏòàÏÉÅ ÏäπÎ•†: 75-78% (Ïä¨Î¶¨ÌîºÏßÄ Î∞òÏòÅ)
 * ÏòàÏÉÅ ÏàòÏùµÎ•†: +9-11% (Í±∞ÎûòÎπÑÏö© Ìè¨Ìï®)
 */

const kisApi = require('../../backend/kisApi');
const hybridScreening = require('../../backend/screeningHybrid');

module.exports = async (req, res) => {
  console.log('\n========================================');
  console.log('üöÄ ÌïòÏù¥Î∏åÎ¶¨Îìú Ïä§ÌÅ¨Î¶¨Îãù ÏãúÏûë');
  console.log('========================================\n');

  const startTime = Date.now();

  try {
    // ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞
    const limit = parseInt(req.query.limit) || 10;
    const market = req.query.market || 'ALL';

    console.log(`üìä ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞: limit=${limit}, market=${market}`);

    // 1. Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ ÌôïÎ≥¥ (ÎèôÏ†Å API Í∏∞Î∞ò)
    console.log('\n[1Îã®Í≥Ñ] Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ ÌôïÎ≥¥ Ï§ë...');
    const { codes: stockList } = await kisApi.getAllStockList(market);

    if (!stockList || stockList.length === 0) {
      throw new Error('Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ ÌôïÎ≥¥ Ïã§Ìå®');
    }

    console.log(`‚úÖ Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ ÌôïÎ≥¥: ${stockList.length}Í∞ú`);

    // 2. ÌïòÏù¥Î∏åÎ¶¨Îìú Ïä§ÌÅ¨Î¶¨Îãù Ïã§Ìñâ
    console.log('\n[2Îã®Í≥Ñ] ÌïòÏù¥Î∏åÎ¶¨Îìú Î∂ÑÏÑù Ïã§Ìñâ Ï§ë...');
    const results = await hybridScreening.runHybridScreening(stockList);

    // 3. ÏÉÅÏúÑ NÍ∞ú Î∞òÌôò
    const topResults = results.slice(0, limit);

    const elapsedTime = ((Date.now() - startTime) / 1000).toFixed(1);

    console.log(`\n‚úÖ Ïä§ÌÅ¨Î¶¨Îãù ÏôÑÎ£å: ${elapsedTime}Ï¥à`);
    console.log(`   - Î∂ÑÏÑù Ï¢ÖÎ™©: ${stockList.length}Í∞ú`);
    console.log(`   - S/A Îì±Í∏â: ${results.length}Í∞ú`);
    console.log(`   - Î∞òÌôò Í≤∞Í≥º: ${topResults.length}Í∞ú\n`);

    // 4. ÏùëÎãµ
    res.status(200).json({
      success: true,
      method: 'hybrid',
      description: 'Grok Î∞±ÌÖåÏä§Ìä∏ + Claude ÏÑ∏Î∂Ä Ï°∞Ï†ï',
      expectedPerformance: {
        winRate: '75-78%',
        avgReturn: '+9-11%',
        signalFrequency: '1.5-2/week'
      },
      count: topResults.length,
      recommendations: topResults.map(r => ({
        stockCode: r.stockCode,
        stockName: r.stockName,
        market: r.market,
        grade: r.grade,
        score: r.score,
        signal: r.signal,
        currentPrice: r.currentPrice,
        todayChange: r.todayChange,
        indicators: {
          volumeGradual: {
            detected: r.indicators.volumeGradual.detected,
            growth: r.indicators.volumeGradual.growth,
            expectedDays: r.indicators.volumeGradual.expectedDays,
            interpretation: r.indicators.volumeGradual.interpretation
          },
          obvDivergence: {
            detected: r.indicators.obvDivergence.detected,
            obvTrend: r.indicators.obvDivergence.obvTrend,
            priceTrend: r.indicators.obvDivergence.priceTrend,
            interpretation: r.indicators.obvDivergence.interpretation
          },
          uptrend: {
            detected: r.indicators.uptrend.detected,
            ma5: r.indicators.uptrend.ma5,
            ma20: r.indicators.uptrend.ma20,
            rsi: r.indicators.uptrend.rsi,
            interpretation: r.indicators.uptrend.interpretation
          }
        },
        scoreBreakdown: {
          volumeGradual: r.indicators.volumeGradual.score,
          obvDivergence: r.indicators.obvDivergence.score,
          uptrend: r.indicators.uptrend.score,
          penalties: r.filter.penalties,
          total: r.score
        }
      })),
      metadata: {
        totalAnalyzed: stockList.length,
        totalFound: results.length,
        returned: topResults.length,
        elapsedTime: elapsedTime + 's',
        market: market,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå ÌïòÏù¥Î∏åÎ¶¨Îìú Ïä§ÌÅ¨Î¶¨Îãù Ïã§Ìå®:', error);

    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};
